<?php

/**
 * @file
 * Provide pgp encryption for files.
 */

include_once 'inc/proc.functions.inc';

/**
 * Implements hook_permission().
 */
function proc_permission() {
  return array(
    'register protected content keys' => array(
      'title' => t('Register Protected Content Keys'),
      'description' => t('Allow user to access Protected Content Keys registration page.'),
    ),
    'new protected file' => array(
      'title' => t('Create new Protected File'),
      'description' => t('Allow user to access Create New Protected File page.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function proc_help($path) {
  switch ($path) {
    case "admin/help#proc":
      return '<p>' . t('Protected Content (proc) provides end-to-end/client side encryption for content.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function proc_menu() {

  // @TODO: replace by 'proc/keyring/add'
  $items['protected-content/key-pair/new'] = array(
    'title' => 'Add Protected Content Key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_proc_generate_keys'),
    'access arguments' => array('register protected content keys'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/proc.forms.inc',
  );
  // @TODO: replace by 'proc/<uid/s>/add'
  $items['protected-content/file/new/%'] = array(
    'title' => 'Add file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_proc_encrypt_file', 3),
    'access arguments' => array('new protected file'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/proc.forms.inc',
  );
  // @TODO: replace by 'proc/<cid>' (view is default operation)
  $items['protected-content/file/open/%'] = array(
    'title' => 'View Protected Content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_proc_decrypt_to_file', 3),
    'access callback' => '_proc_recipient',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'inc/proc.forms.inc',
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function proc_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'proc') . '/inc',
  );
}

/**
 * Implements hook_libraries_info().
 */
function proc_libraries_info() {
  $libs = array();

  $crypto_info = _proc_get_cryptolib_settings();

  $libs[$crypto_info['folder']] = array(
    'name' => $crypto_info['versionstring'],
    'vendor url' => $crypto_info['vendor'],
    'download url' => $crypto_info['url'],
    'version arguments' => array(
      'file' => $crypto_info['file'],
      'pattern' => '/v(([0-9]\.?)+)/',
      'lines' => 1,
      'cols' => 24,
    ),
    'files' => array(
      'js' => array($crypto_info['file']),
    ),
  );

  return $libs;
}

/**
 * Implements hook_entity_info().
 */
function proc_entity_info() {
  $info = array(
    'proc' => array(
      'label' => t('Protected Content'),
      'base table' => 'proc',
      'entity keys' => array(
        'id' => 'pid',
        // Database field where bundle types of entities are saved.
        'bundle' => 'type',
      ),
      // Describe which property of entity object shall be used to
      // identify entity bundle.
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      // Describe bundles of this entity.
      'bundles' => array(
        'proc_keyring' => array(
          'label' => t('Keyring'),
        ),
        'proc_ciphertxt' => array(
          'label' => t('Ciphertext'),
        ),
      ),
      'entity class' => 'Entity',
      // @TODO: move write/read loginc into a custom entity controller
      'controller class' => 'EntityAPIController',
      'metadata controller class' => '',
      // Is it possible to attach fields to bundles.
      'fieldable' => TRUE,
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
  return $info;
}

/**
 * Implements hook_entity_property_info().
 *
 * It is not necessary to describe metadata for fields created with
 * field_create_instance function. Metadata for these fields is
 * created automatically.
 */
function proc_entity_property_info() {
  $info = array();
  $properties = &$info['proc']['properties'];
  $properties['pid'] = array(
    'type' => 'integer',
    'schema field' => 'pid',
    'label' => t('Proc Armored entity ID'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['type'] = array(
    'type' => 'text',
    'schema field' => 'type',
    'required' => TRUE,
    'label' => t('Proc Armored entity type (bundle)'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['uid'] = array(
    'type' => 'integer',
    'schema field' => 'uid',
    'required' => TRUE,
    'label' => t('Proc Armored author'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $properties['created'] = array(
    'type' => 'integer',
    'schema field' => 'created',
    'required' => TRUE,
    'label' => t('Proc Armored created timestamp'),
    'setter callback' => 'entity_property_verbatim_set',
  );

  return $info;
}

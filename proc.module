<?php
/**
 * @file
 * Primary module hooks for Protected Content module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\proc\Entity\Bundle\ProcCipherTextBundle;
use Drupal\proc\Entity\Proc;
use Drupal\proc\Form\ProcDecryptForm;

require_once 'inc/proc.functions.inc';

/**
 * Implements hook_help().
 */
function proc_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.proc') {
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The Protected Content module allows you to create RSA keys, encrypt and decrypt content.') . '</p>';
    return $output;
  }
  return FALSE;
}


 /**
 * Implements hook_form_alter().
 */
function proc_form_proc_keys_generation_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  $proc_data = _proc_common_get_decryption_form_data(NULL);

  $config = Drupal::config('proc.settings');
  $key_size = $config->get('proc-rsa-key-size');

  $form['#attached'] = [
    'library' => [
      0 => 'proc/openpgpjs',
      1 => 'proc/proc-generate-keys',
    ],
    'drupalSettings' => [
      'proc' => [
        'proc_labels'   => _proc_js_labels(),
        'proc_data'     => $proc_data,
        'proc_key_size' => $key_size,
      ]
    ],
  ];

  $form['#action'] = 'generate-keys';
}

/**
* Implements hook_form_alter().
*/
function proc_form_proc_encrypt_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  $proc_data = _proc_common_get_decryption_form_data(NULL);

  $config = Drupal::config('proc.settings');
  $max_file_size = $config->get('proc-file-entity-max-filesize');
  if (empty($max_file_size)) {
    // Use 10M if no value is set.
    $max_file_size = 10000000;
  }

  $current_path = Drupal::service('path.current')->getPath();

  $query_params = Drupal::request()->query->all();
  $destination = FALSE;
  if (isset($query_params['destination'])) {
    $destination = $query_params['destination'];
  }

  $path_array = explode('/', $current_path);
  $selected_user_ids = explode(',', $path_array[3]);

  // Given a user ID, get the creation date of its
  // newwest encryption key.
  $proc_ids = [];
  foreach ($selected_user_ids as $user_id) {
    $query = Drupal::entityQuery('proc')
      ->accessCheck(TRUE)
      ->condition('user_id', $user_id)
      ->condition('type', 'keyring')
      ->sort('id', 'DESC')
      ->range(0, 1);
    $proc_ids[$user_id] = key($query->execute());
  }

  $created = [];
  foreach ($proc_ids as $user_id => $proc_id) {
    // Get the creation data of the proc ID:
    $proc = Proc::load($proc_id);
    if ($proc) {
      $created[$user_id] = $proc->get('created')->getValue()[0]['value'];
    }
    else {
      $created[1] = 1;
    }
  }

  $settings = [
    'proc_labels' => _proc_js_labels(),
    'proc_data'   => $proc_data,
    // @todo: turn this into a configuration:
    'proc_file_entity_max_filesize' => $max_file_size,
    'proc_post_max_size_bytes' => _proc_get_post_max_size_bytes(),
    'proc_recipients_pubkeys_changed' => json_encode($created),
    'basePath' => base_path(),
  ];
  $settings += $form['#attached']['drupalSettings']['proc'];

  $form['#attached'] = [
    'library' => [
      0 => 'proc/openpgpjs',
      1 => 'proc/proc-encrypt',
    ],
    'drupalSettings' => $settings,
  ];

  $current_path = substr($current_path, 1);
  $form_state->set('storage', $selected_user_ids);
  $form['#action'] = base_path() . $current_path;

  if ($destination) {
    $form['#action'] = base_path() . $destination;
  }
}

/**
 * Implements hook_entity_bundle_info_alter().
 */
function proc_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['proc']['proc'])) {
    $bundles['proc']['cipher']['class'] = ProcCipherTextBundle::class;
  }
}

/**
* Implements hook_form_alter().
*/
function proc_form_proc_decrypt_form_alter(&$form, FormStateInterface $form_state, $form_id): void {
  // Get cipher IDs from the URL:
  $current_path = Drupal::service('path.current')->getPath();
  $path_array = explode('/', $current_path);
  $cipher_ids_csv = $path_array[2];
  $cids = _proc_get_csv_argument($cipher_ids_csv);
  // Get
  $ciphers_data = _proc_common_get_ciphers($cids, FALSE);

  // Decryption requires a keyring:
  if (empty($ciphers_data['pubkey'])) {
    ProcDecryptForm::denyAccess();
  }

  $common_data = _proc_common_get_decryption_form_data($ciphers_data['privkey']);

  $ciphers_changed = [];
  $files_names = [];
  $files_sizes = [];
  foreach($ciphers_data['ciphers'] as $cipher_id_data) {
    $ciphers_changed[] = $cipher_id_data['changed'];
    $files_names[] = $cipher_id_data['source_file_name'];
    $files_sizes[] = $cipher_id_data['source_file_size'];
    // For differentiating files from text areas:
    if (isset($cipher_id_data['source_input_mode'])) {
      $sources_input_mode[] = $cipher_id_data['source_input_mode'];
    }
    else {
      $sources_input_mode[] = 0;
    }
    $sources_signed[] = 0;

  }

  $form['#attached'] = [
    'library' => [
      0 => 'proc/openpgpjs',
      1 => 'proc/proc-decrypt',
    ],
    'drupalSettings' => [
      'proc' => [
        'proc_labels'              => _proc_js_labels(),
        'proc_pass'                => $common_data['proc_pass'],
        // 'proc_data'                => $ciphers_data,
        'proc_privkey'             => $ciphers_data['privkey'],
        'proc_ids'                 => array_keys($ciphers_data['ciphers']),
        'procs_changed'            => $ciphers_changed,
        // Also used for labels on text area encryption:
        'proc_sources_file_names'  => $files_names,
        'proc_sources_file_sizes'  => $files_sizes,
        // @todo: implement this:
        'proc_sources_input_modes' => $sources_input_mode,
        // @todo: implement this:
        'proc_sources_signed'      => $sources_signed,
        // @TODO: get this from configuration:
        'proc_skip_size_mismatch'  => 'TRUE',
        'base_path'                => base_path(),
        'proc_signed'              => $sources_signed,
      ]
    ],
  ];
}

/**
* Implements hook_form_alter().
*/
function proc_form_proc_update_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  $current_path = Drupal::service('path.current')->getPath();
  $path_array = explode('/', $current_path);

  // Sanitize and preprocess arguments:
  $csvs = _proc_get_csv_arguments([
    'cids_csv' => $path_array[3],
    'uids_csv' => $path_array[4],
  ]);

  if (is_numeric($csvs['uids_csv']['array'][0])) {
    $action_path = base_path() . substr($current_path, 1);
    $form['#action'] = $action_path;
    // There is at least one user ID and therefore updated did not happen yet:
    $uids     = $csvs['uids_csv']['array'];
    $uids_csv = $csvs['uids_csv']['string'];
    $cids     = $csvs['cids_csv']['array'];
    $cids_csv = $csvs['cids_csv']['string'];

    $ciphers_data = _proc_common_get_ciphers($cids);

    // Updating requires a keyring:
    if (!$ciphers_data['pubkey']) {
      ProcDecryptForm::denyAccess();
    }

    $privkey      = $ciphers_data['privkey'];
    $cid_cipher   = $ciphers_data['ciphers'];
    $form['pass'] = _proc_common_get_decryption_form_data(NULL)['proc_pass'];

    // If some recipient is being removed of some content, allow update to proceed
    // only if current user is also the author of the content:
    $recipients = [];

    foreach ($ciphers_data['ciphers'] as $cipher_data) {
      if ($cipher_data['proc_owner_uid'] != \Drupal::currentUser()->id()) {
        // Current recipients:
        foreach ($cipher_data['proc_recipients'] as $recipient) {
          $recipients[] = $recipient;
        }
      }
    }
    if (!empty($recipients)) {
      $all_current_recipients = array_unique($recipients);
      // $context = [
      //   'unalterable_recipient_uids' => $uids,
      // ];
      // drupal_alter('cipher_update_owner_check', $all_current_recipients, $context);

      if (array_diff($all_current_recipients, $uids)) {
        ProcDecryptForm::denyAccess();
      }
    }

    $pubkeys_data        = _proc_common_get_pubkeys($uids);
    $recipients_pubkeys  = $pubkeys_data['recipients_pubkeys'];
    $post_max_size_bytes = $pubkeys_data['post_max_size_bytes'];

    $pubkeys = [];
    foreach ($recipients_pubkeys as $recipient_pubkey) {
      $pubkeys[] = ['key' => $recipient_pubkey['key'], 'changed' => "0"];
    }

    $armored_ciphers = [];
    foreach ($cids as $cid) {
      $armored_ciphers[$cid] = _proc_get_cipher($cid, NULL, NULL, FALSE);

    }

    $encryption_form_elements = [
      'proc_ciphers'             => $cid_cipher,
      'proc_ciphers_index'       => $cids,
      'proc_recipients_pubkeys'  => Json::encode($pubkeys),
      'proc_post_max_size_bytes' => $post_max_size_bytes,
    ];

    $proc_data = _proc_common_get_decryption_form_data($privkey);

    $proc_data = $proc_data + $encryption_form_elements;

    $form['#attached'] = [
      'library' => [
        0 => 'proc/openpgpjs',
        1 => 'proc/proc-update',
      ],
      'drupalSettings' => [
        'proc' => [
          'proc_labels' => _proc_js_labels(),
          'proc_data'   => $proc_data,
        ]
      ],
    ];

    $update_field_form_elemement_prefixes = [
      'cipher_text_cid_',
      'generation_timestamp_cid_',
      'generation_timespan_cid_',
      'browser_fingerprint_cid_',
      'source_file_name_cid_',
      'source_file_size_cid_',
      'source_file_type_cid_',
      'source_file_last_change_cid_',
    ];

    foreach ($cids as $cid) {
      foreach ($update_field_form_elemement_prefixes as $update_field_form_elemement_prefix) {
        $form[$update_field_form_elemement_prefix . $cid] = ['#type' => 'hidden'];
      }
    }
  }
  else {
    // Updating has already happened:
  }

}

/**
 * Implements hook_theme().
 */
function proc_theme($existing, $type, $theme, $path) {
  return [
    'proc_template' => [
      'variables' => [
        'linkTitle' => '',
        'elementSettings' => NULL,
        'elementClasses' => NULL,
        'elementAttributes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_library_info_build().
 */
function proc_library_info_build() {
  $libraries['proc'] = [
    'version' => '1.x',
    'js' => [
      'js/proc-field.js' => [],
    ],
  ];

  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function proc_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id): void {

  if (isset($form['settings']['target_type']) && $form['settings']['target_type']['#default_value'] === 'proc') {
    $form['settings']['target_type']['#disabled'] = TRUE;
  }

}

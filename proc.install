<?php
/**
 * @file
 * Install, update and uninstall functions for the Protected Content module.
 */

/**
 * Implements hook_install().
 */
function proc_install() {
  // use Drupal\Core\Field\FieldStorageDefinitionInterface;
  \Drupal::messenger()->addStatus(__FUNCTION__);
  // $proc = \Drupal\proc\Entity\Proc::load($proc_id);
  // $fields['cipher_recipient'] = Drupal\Core\Field\FieldStorageDefinitionInterface::create([
  //   'entity_type' => 'proc',
  //   'field_name' => 'cipher_recipient',
  //   'type' => 'entity_reference',
  //   'cardinality' => -1,
  //   'settings' => [
  //     'target_type' => 'user',
  //   ],
  // ]);
  // \Drupal::service('field_storage_definition.listener')->onFieldStorageDefinitionCreate($fields['cipher_recipient']);

  // use Drupal\field\Entity\FieldStorageConfig;
  // use Drupal\field\Entity\FieldConfig;

  // $field_storage = \Drupal\field\Entity\FieldStorageConfig::create([
  //   'entity_type' => 'proc',
  //   'field_name' => 'field_proc_recipients',
  //   'type' => 'entity_reference',
  //   'settings' => [
  //     'target_type' => 'user',
  //   ],
  // ]);
  // $field_storage->save();
  
  // $field = \Drupal\field\Entity\FieldConfig::create([
  //   'entity_type' => 'proc',
  //   'field_name' => 'field_proc_recipients',
  //   // 'bundle' => 'ciphertext',
  //   'label' => 'Recipients of a cipher text',
  //   'settings' => [
  //     'handler' => 'default',
  //     'handler_settings' => [
  //       'target_bundles' => [],
  //       'sort' => [
  //         'field' => '_none',
  //       ],
  //       'auto_create' => false,
  //     ],
  //   ],
  // ]);
  // $field->save();

}

/**
 * Implements hook_uninstall().
 */
function proc_uninstall() {
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_schema().
 */
function proc_schema() {
  $schema['proc_example'] = [
    'description' => 'Table description.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique record ID.',
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {users}.uid of the user who created the record.',
      ],
      'status' => [
        'description' => 'Boolean indicating whether this record is active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ],
      'type' => [
        'type' => 'varchar_ascii',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Type of the record.',
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp when the record was created.',
      ],
      'data' => [
        'type' => 'blob',
        'not null' => TRUE,
        'size' => 'big',
        'description' => 'The arbitrary data for the item.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'type' => ['type'],
      'uid' => ['uid'],
      'status' => ['status'],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function proc_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['proc_status'] = [
      'title' => t('Protected Content status'),
      'value' => t('Protected Content value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

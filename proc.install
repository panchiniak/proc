<?php
/**
 * @file
 * Install, update and uninstall functions for the Protected Content module.
 */

/**
 * Implements hook_install().
 */
function proc_install() {
  \Drupal::messenger()->addStatus(__FUNCTION__);

  // $bundle = \Drupal\proc\Entity\ProcType::create([
  //   'id' => 'cipher',
  //   'label' => 'Cipher Text',
  //   'revision' => FALSE,
  // ]);
  // $bundle->save();
  
  \Drupal::entityTypeManager()->clearCachedDefinitions();

  $entity_type_manager = \Drupal::entityTypeManager();
  $custom_entity_type = $entity_type_manager->getDefinition('proc');
  $field_storage_definition = \Drupal\Core\Field\BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Cipher recipients set'))
    ->setDescription(t('Recipients set for a cipher text.'))
    ->setSetting('target_type', 'user')
    ->setCardinality(-1)
    ->setTranslatable(FALSE)
    ->setRevisionable(FALSE)
    ->setCardinality(\Drupal\Core\Field\FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'entity_reference_label',
      'weight' => 0,
    ])
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => 0,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'autocomplete_type' => 'tags',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', true)
    ->setDisplayConfigurable('view', true);

  $field_name = 'field_proc_recipients';
  $entity_type_manager->getStorage('field_storage_config')->create([
    'field_name' => $field_name,
    'entity_type' => 'proc',
    'type' => 'entity_reference',
    'cardinality' => -1,
  ])->save();
  
  $entity_type_manager->getStorage('proc')->create([
    'field_name' => $field_name,
    'entity_type' => $custom_entity_type->id(),
    'bundle' => 'cipher',
    'label' => 'Proc Cipher Recipientes Set',
  ])->save();

  $module_name = 'proc';
  $entity_type = 'proc';
  $fields = [
    $field_name,
  ];

  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $field_definitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions($entity_type, $entity_type);
  foreach ($fields as $field_name) {
    if (!empty($field_definitions[$field_name])) {
      $entity_definition_update_manager
        ->installFieldStorageDefinition(
          $field_name,
          $entity_type,
          $module_name,
          $field_definitions[$field_name]);
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function proc_uninstall() {
  // @TODO: remove leftovers from database
  \Drupal::messenger()->addStatus(__FUNCTION__);
}

/**
 * Implements hook_requirements().
 */
function proc_requirements($phase) {
  $requirements = [];

  if ($phase == 'runtime') {
    $value = mt_rand(0, 100);
    $requirements['proc_status'] = [
      'title' => t('Protected Content status'),
      'value' => t('Protected Content value: @value', ['@value' => $value]),
      'severity' => $value > 50 ? REQUIREMENT_INFO : REQUIREMENT_WARNING,
    ];
  }

  return $requirements;
}

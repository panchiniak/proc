<?php

/**
 * @file
 * Create a proc entity reference field.
 */

include_once 'inc/proc_refield.functions.inc';

/**
 * Implements hook_help().
 */
function proc_refield_help($path) {
  switch ($path) {
    case "admin/help#proc_refield":
      return '<p>' . t('Protected Content Reference Field (proc_refield) enables Protected Content API at your entity reference field settings.') . '</p>';
  }
}

/**
 * Implements hook_views_api().
 */
function proc_refield_views_api() {
  return [
    'api' => '3.0',
    'path' => drupal_get_path('module', 'proc_refield') . '/inc',
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function proc_refield_field_widget_form_alter(&$element, &$form_state, &$context) {
  if (!isset($element['target_id']['#entity_type'])) {
    return;
  }

  $field_instance = field_info_instance($element['target_id']['#entity_type'], $element['target_id']['#field_name'], $element['target_id']['#bundle']);

  if (
    isset($field_instance['settings']['behaviors']['proc_behavior_plugin']['onclick']) &&
    $field_instance['settings']['behaviors']['proc_behavior_plugin']['onclick']['enable'][1] == '1'
  ) {
    $add_file_link_text = '<span id="add-file-proc-link-' . $element['target_id']['#field_name'] . '" class="btn btn-default">' . t('Add a file') . '</span>';
    // @TODO: add behaviour for when there is no fetcher:
    // @TODO: add hook alter to allow customization of procRecipientsFetcherCriteria
    $recipients_argument = 'NULL';
    $context = array(
      'unalterable_field_instance' => $field_instance,
    );
    drupal_alter('recipients_fetcher_argument', $recipients_argument, $context);

    $proc_message_fetcher_arguments = "
      var procRecipientsFetcherCriteria = '" . $recipients_argument . "';
      var procViewFecther = '" . $field_instance['settings']['behaviors']['proc_behavior_plugin']['onclick']['fetcher'] . "';
      var procOriginFieldName = '" . $element['target_id']['#field_name'] . "';
      var procOriginFieldEntityBundle = '" . $element['target_id']['#bundle'] . "';
      var procOriginFieldEntityType = '" . $element['target_id']['#entity_type'] . "';
      var procOriginFieldEntityFetcher = '" . $field_instance['settings']['behaviors']['proc_behavior_plugin']['onclick']['fetcher'] . "';
      var procOriginModuleName = '" . basename(__FILE__, '.module') . "';
    ";



    $add_file_link = l(
      $add_file_link_text,
      '', [
        'attributes' => [
          'class' => ['autodialog'],
          'data-dialog-title' => t('File encryption'),
          'data-dialog-width' => '400',
          'id' => ['add-file-proc-link-' . $element['target_id']['#field_name']],
          'rel' => ['[center,60]'],
          'name' => ['-proc-encrypt-file'],
          'title' => t('File encryption'),
          'onclick' => $proc_message_fetcher_arguments . "
            var inputElementId = this.parentNode.previousElementSibling.previousElementSibling.id;
            var currentLink = this;

            console.log(procViewFecther);

            var viewAccessURL = window.location.origin +
              Drupal.settings.basePath +
              'proc/recipients/' +
              procViewFecther +
              '/' + procRecipientsFetcherCriteria;

            jQuery.ajax({
              async: false,
              url: viewAccessURL,
              success: function(result){
                let procAddFilePath =
                  window.location.origin +
                  Drupal.settings.basePath +
                  'proc/add/' +
                  result +
                  '?proc_refield=' + procOriginModuleName + '&proc_refield_field_id=' + procOriginFieldName +
                  '&proc_refield_field_bundle=' + procOriginFieldEntityBundle +
                  '&proc_refield_field_entity_type=' +procOriginFieldEntityType  +
                  '&proc_recipients_view_fetcher=' + procOriginFieldEntityFetcher +
                  '&proc_recipients_view_fetcher_arg=' + procRecipientsFetcherCriteria +
                  '&input_element_id=' + inputElementId;
                // Populate Add file link with UIDs of recipient users enriched
                // with metadta for retuning the entity reference into the
                // correspondent input element.
                jQuery(currentLink).attr('href', procAddFilePath);
              }
            });
          ",
        ],
        'html' => TRUE,
      ]
    );

    $context = array(
      'unalterable_field_instance' => clone (object)  $field_instance,
      'unalterable_form_element' => clone (object) $element,
    );
  
    drupal_alter('proc_refield_add_file_link', $add_file_link, $context);

    $element['target_id']['#description'] = $add_file_link;
    if (isset($field_instance['target_id']['description'])){
      $element['target_id']['#description'] = $field_instance['description'] . '<div>' . $add_file_link . '</div>';
    }

  }
}

/**
 * Implements hook_form_alter().
 */
function proc_refield_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  $proc_refield_widget = _proc_refield_get_proc_refield_widget();
  if (in_array($form_state['build_info']['args'][0]['widget']['type'], $proc_refield_widget)){
    // @todo: add validation to assure the view choosen is a view of users, if possible
  }
}

/**
 * Implements hook_menu().
 */
function proc_refield_menu() {
  $items = array();
  $items['proc/recipients/%/%'] = [
    'page callback' => '_proc_refield_recipients_menu_callback',
    'page arguments' => [2,3],
    'access arguments' => ['new protected file'],
  ];
  return $items;
}

/**
 * Implements hook_page_alter().
 */
function proc_refield_page_alter(&$page) {
  // If this is a proc page inbound on a field altered by proc refield:
  if (isset($page['content']['system_main']['#action'])) {
    if (strpos($page['content']['system_main']['#action'], 'proc_refield_field_id') !== false) {
      unset($page['#handler']->handler);
    }
  }
}

/**
 * Implements hook_get_cipher_text_alter().
 *
 * Check if cipher has been created after the key was generated.
 */
function proc_refield_get_cipher_text_alter(&$cipher_text_data, $context) {
  global $user;
  // If cipher has been created previously to the creation of latest user's key:
  if ($context['unalterable_cipher_object']->created->value() < _proc_get_keys($user->uid)['created']){
    $expired_encryption_alert = t(
      'You have lost access to previously encrypted <b>@file-name (@file-id)</b> file due to the generation of your newer encryption key.',
      array(
      '@file-name' => $context['unalterable_cipher_object']->label->value(),
      '@file-id' => $context['unalterable_cipher_object']->pid->value(),
      )
    );
    drupal_set_message($expired_encryption_alert, 'warning');
    // Return empty cipher data in order to remove default URI.
    $cipher_text_data = array();
  }
}

/**
 * Implements hook_cipher_postsave().
 */
function proc_refield_cipher_postsave($pid, $form_state) {
  global $base_url;

  // Get parameter at private message form load (not from the modal window!)
  $url = str_replace('amp;', '', filter_xss($form_state['complete form']['#action']));

  $params = drupal_parse_url($url);

  if (isset($params['query']['proc_refield_field_id'])){
    $proc_field_id = $params['query']['proc_refield_field_id'];
  }

  $proc_aruments = "
    var procFieldId = '" . $proc_field_id  . "';
    var procRefieldEntittyType = '" . $params['query']['proc_refield_field_entity_type'] . "';
    var procRefieldFieldBundle = '" . $params['query']['proc_refield_field_bundle'] . "';
    var procInputElementId = '" . $params['query']['input_element_id'] . "';
  ";

  if (isset($params['query']['proc_refield'])) {
    watchdog('proc_refield', 'Created proc %pid on %module at field %fid.', [
      '%pid' => $pid,
      '%module' => $params['query']['proc_refield'],
      '%fid' => $proc_field_id,
    ], WATCHDOG_INFO);

    $commands[] = ajax_command_append(
      'body',
      "
        <script>
          var height = document.getElementsByClassName('ui-dialog')[1].getBoundingClientRect().y;
          Drupal.autodialog.animatedMove(jQuery('.autodialog-content').dialog('widget'), height * 3 );
          jQuery('.autodialog-content').dialog('close').trigger('close');
        </script>
        <script>".
          $proc_aruments . "
          // Available results in the entity reference for this field instance:
            let resetCache = new Date().getTime();
            let url =
              window.location.origin +
              Drupal.settings.basePath +
              '/entityreference/autocomplete/single/' +
              procFieldId + '/' +
              procRefieldEntittyType + '/' +
              procRefieldFieldBundle +
              '/NULL' +
              '?_=' +
              resetCache;

            jQuery.getJSON(url, function (data, result) {
              if (result != 'success') {
                  return;
              }
              // Get proc id
              // @TODO: check pid instead of just using the latest
              let procInputValue = Object.keys(data)[0];
              jQuery('input[id=' + procInputElementId + ']')[0].value = procInputValue;
            });
        </script>
      "
    );
    ajax_deliver(['#type' => 'ajax', '#commands' => $commands]);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function proc_refield_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/entityreference_' . $plugin;
  }
}
